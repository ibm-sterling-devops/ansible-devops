{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IBM Sterling Devops Ansible \uf0c1 IBM Sterling Devops Project is an open source project to deploy IBM Sterling Products and other resources directly from the command line. Developed in Ansible, it provides a collection of playbooks and roles that automated deploy for IBM Sterling B2Bi, IBM Connect:Direct, ... on Redhat OpenShift. Current playbooks: Install Sterling Products (standalone) Install Connect:Direct (standalone) Install Sterling B2B Integrator (standalone) Deploy Sterling Products on Redhat OpenShift / Kubernetes Deploy IBM Sterling Connect:Direct Deploy IBM Sterling Connect:Direct Web Service Deploy IBM Sterling Transformation Server Deploy IBM Sterling Transformation Extender Advanced Deploy IBM Sterling B2B Integrator Deploy IBM Sterling Control Center Director/Monitor Deploy IBM Sterling External Authentication Server Deploy IBM Sterling Proxy Server on Redhat OpenShift (Engine, Configuration Manager, Perimeter) Contributors See the list of contributors who participated in this project. License This project is licensed under the Eclipse Public License - v 2.0 - see the LICENSE file for details Disclaimer This repository is a community-driven projects and is not officially supported or endorsed by IBM. While members of the community may include IBM employees, this project is independent of IBM's official support channels. Please note that any contributions, issues, or inquiries regarding this repository should be directed to the community maintainers and not to IBM's support teams. We appreciate your understanding and participation in this community-driven initiative. This code can be used as is. And any feedback will be welcome. We does not make any warranty about the completeness, reliability and accuracy of this code. Any action you take by using this code is strictly at your own risk, and this project will not be liable for any losses and damages in connection with the use of this code.","title":"Home"},{"location":"#ibm-sterling-devops-ansible","text":"IBM Sterling Devops Project is an open source project to deploy IBM Sterling Products and other resources directly from the command line. Developed in Ansible, it provides a collection of playbooks and roles that automated deploy for IBM Sterling B2Bi, IBM Connect:Direct, ... on Redhat OpenShift. Current playbooks: Install Sterling Products (standalone) Install Connect:Direct (standalone) Install Sterling B2B Integrator (standalone) Deploy Sterling Products on Redhat OpenShift / Kubernetes Deploy IBM Sterling Connect:Direct Deploy IBM Sterling Connect:Direct Web Service Deploy IBM Sterling Transformation Server Deploy IBM Sterling Transformation Extender Advanced Deploy IBM Sterling B2B Integrator Deploy IBM Sterling Control Center Director/Monitor Deploy IBM Sterling External Authentication Server Deploy IBM Sterling Proxy Server on Redhat OpenShift (Engine, Configuration Manager, Perimeter) Contributors See the list of contributors who participated in this project. License This project is licensed under the Eclipse Public License - v 2.0 - see the LICENSE file for details Disclaimer This repository is a community-driven projects and is not officially supported or endorsed by IBM. While members of the community may include IBM employees, this project is independent of IBM's official support channels. Please note that any contributions, issues, or inquiries regarding this repository should be directed to the community maintainers and not to IBM's support teams. We appreciate your understanding and participation in this community-driven initiative. This code can be used as is. And any feedback will be welcome. We does not make any warranty about the completeness, reliability and accuracy of this code. Any action you take by using this code is strictly at your own risk, and this project will not be liable for any losses and damages in connection with the use of this code.","title":"IBM Sterling Devops Ansible"},{"location":"requirements/","text":"Sure, here's the updated guide for installing kubectl , oc , git , and ansible on Linux using yum : Installation Guide for kubectl, oc, git, and ansible \uf0c1 Linux \uf0c1 Install kubectl \uf0c1 Download the latest release: sh curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" Make the kubectl binary executable: sh chmod +x ./kubectl Move the binary to your PATH: sh sudo mv ./kubectl /usr/local/bin/kubectl Test to ensure the version you installed is up-to-date: sh kubectl version --client Install oc \uf0c1 Download the latest release: sh curl -LO \"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\" Extract the tar file: sh tar -xzvf openshift-client-linux.tar.gz Move the binaries to your PATH: sh sudo mv oc kubectl /usr/local/bin/ Test to ensure the version you installed is up-to-date: sh oc version Install git \uf0c1 Install git: sh sudo yum update -y sudo yum install git -y Verify the installation: sh git --version Install ansible \uf0c1 Install the dependencies: sh sudo yum install epel-release -y sudo yum update -y Install Ansible: sh sudo yum install ansible -y Verify the installation: sh ansible --version macOS \uf0c1 Install kubectl \uf0c1 Install with Homebrew: sh brew install kubectl Test to ensure the version you installed is up-to-date: sh kubectl version --client Install oc \uf0c1 Install with Homebrew: sh brew install openshift-cli Test to ensure the version you installed is up-to-date: sh oc version Install git \uf0c1 Verify the installation: sh git --version Install ansible \uf0c1 Install Ansible with Homebrew: sh brew install ansible Verify the installation: sh ansible --version Windows (Using WSL) \uf0c1 Install WSL \uf0c1 Open PowerShell as Administrator and run: sh wsl --install Restart your computer if prompted. Install a Linux distribution from the Microsoft Store (e.g., Ubuntu). Set up WSL \uf0c1 Open your installed Linux distribution. Update the package list and install necessary packages: sh sudo apt-get update sudo apt-get upgrade -y Install kubectl \uf0c1 Download the latest release: sh curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" Make the kubectl binary executable: sh chmod +x ./kubectl Move the binary to your PATH: sh sudo mv ./kubectl /usr/local/bin/kubectl Test to ensure the version you installed is up-to-date: sh kubectl version --client Install oc \uf0c1 Download the latest release: sh curl -LO \"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\" Extract the tar file: sh tar -xzvf openshift-client-linux.tar.gz Move the binaries to your PATH: sh sudo mv oc kubectl /usr/local/bin/ Test to ensure the version you installed is up-to-date: sh oc version Install git \uf0c1 Install git: sh sudo apt-get update sudo apt-get install git -y Verify the installation: sh git --version Install ansible \uf0c1 Install the dependencies: sh sudo apt-get update sudo apt-get install software-properties-common -y Add the Ansible PPA: sh sudo add-apt-repository --yes --update ppa:ansible/ansible Install Ansible: sh sudo apt-get install ansible -y Verify the installation: sh ansible --version ``` This guide now includes instructions for using yum to install kubectl , oc , git , and ansible on Linux.","title":"Requirements"},{"location":"requirements/#installation-guide-for-kubectl-oc-git-and-ansible","text":"","title":"Installation Guide for kubectl, oc, git, and ansible"},{"location":"requirements/#linux","text":"","title":"Linux"},{"location":"requirements/#install-kubectl","text":"Download the latest release: sh curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" Make the kubectl binary executable: sh chmod +x ./kubectl Move the binary to your PATH: sh sudo mv ./kubectl /usr/local/bin/kubectl Test to ensure the version you installed is up-to-date: sh kubectl version --client","title":"Install kubectl"},{"location":"requirements/#install-oc","text":"Download the latest release: sh curl -LO \"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\" Extract the tar file: sh tar -xzvf openshift-client-linux.tar.gz Move the binaries to your PATH: sh sudo mv oc kubectl /usr/local/bin/ Test to ensure the version you installed is up-to-date: sh oc version","title":"Install oc"},{"location":"requirements/#install-git","text":"Install git: sh sudo yum update -y sudo yum install git -y Verify the installation: sh git --version","title":"Install git"},{"location":"requirements/#install-ansible","text":"Install the dependencies: sh sudo yum install epel-release -y sudo yum update -y Install Ansible: sh sudo yum install ansible -y Verify the installation: sh ansible --version","title":"Install ansible"},{"location":"requirements/#macos","text":"","title":"macOS"},{"location":"requirements/#install-kubectl_1","text":"Install with Homebrew: sh brew install kubectl Test to ensure the version you installed is up-to-date: sh kubectl version --client","title":"Install kubectl"},{"location":"requirements/#install-oc_1","text":"Install with Homebrew: sh brew install openshift-cli Test to ensure the version you installed is up-to-date: sh oc version","title":"Install oc"},{"location":"requirements/#install-git_1","text":"Verify the installation: sh git --version","title":"Install git"},{"location":"requirements/#install-ansible_1","text":"Install Ansible with Homebrew: sh brew install ansible Verify the installation: sh ansible --version","title":"Install ansible"},{"location":"requirements/#windows-using-wsl","text":"","title":"Windows (Using WSL)"},{"location":"requirements/#install-wsl","text":"Open PowerShell as Administrator and run: sh wsl --install Restart your computer if prompted. Install a Linux distribution from the Microsoft Store (e.g., Ubuntu).","title":"Install WSL"},{"location":"requirements/#set-up-wsl","text":"Open your installed Linux distribution. Update the package list and install necessary packages: sh sudo apt-get update sudo apt-get upgrade -y","title":"Set up WSL"},{"location":"requirements/#install-kubectl_2","text":"Download the latest release: sh curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" Make the kubectl binary executable: sh chmod +x ./kubectl Move the binary to your PATH: sh sudo mv ./kubectl /usr/local/bin/kubectl Test to ensure the version you installed is up-to-date: sh kubectl version --client","title":"Install kubectl"},{"location":"requirements/#install-oc_2","text":"Download the latest release: sh curl -LO \"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\" Extract the tar file: sh tar -xzvf openshift-client-linux.tar.gz Move the binaries to your PATH: sh sudo mv oc kubectl /usr/local/bin/ Test to ensure the version you installed is up-to-date: sh oc version","title":"Install oc"},{"location":"requirements/#install-git_2","text":"Install git: sh sudo apt-get update sudo apt-get install git -y Verify the installation: sh git --version","title":"Install git"},{"location":"requirements/#install-ansible_2","text":"Install the dependencies: sh sudo apt-get update sudo apt-get install software-properties-common -y Add the Ansible PPA: sh sudo add-apt-repository --yes --update ppa:ansible/ansible Install Ansible: sh sudo apt-get install ansible -y Verify the installation: sh ansible --version ``` This guide now includes instructions for using yum to install kubectl , oc , git , and ansible on Linux.","title":"Install ansible"},{"location":"others/known_problems/","text":"Known problems \uf0c1 Connect:Direct Versions: 6.3.0.0_ifix016 and Helm Version: 1.3.1 \uf0c1 SPCLI> SPCG760E rc=8 CMS KeyStore open exception - Invalid KeyStore Format.. [2024/03/18 17:30:42.46 ] | [ERROR] | Failure in generating self-signed certificate with RC=8. Line no: 221 In IBM Cloud, the StorageClass of the ReadWriteOnce type, which is requested in the values.yaml of the Helm chart, is ibmc-block-gold . But when using this storageClass I had permission problems. When changing to the ibmc-file-gold and/or ibmc-file-gold-gid storageClass, I had no problems running C:D in Container, both storageClasses are of the ReadWriteMany type.","title":"Known Problems"},{"location":"others/known_problems/#known-problems","text":"","title":"Known problems"},{"location":"others/known_problems/#connectdirect-versions-6300_ifix016-and-helm-version-131","text":"SPCLI> SPCG760E rc=8 CMS KeyStore open exception - Invalid KeyStore Format.. [2024/03/18 17:30:42.46 ] | [ERROR] | Failure in generating self-signed certificate with RC=8. Line no: 221 In IBM Cloud, the StorageClass of the ReadWriteOnce type, which is requested in the values.yaml of the Helm chart, is ibmc-block-gold . But when using this storageClass I had permission problems. When changing to the ibmc-file-gold and/or ibmc-file-gold-gid storageClass, I had no problems running C:D in Container, both storageClasses are of the ReadWriteMany type.","title":"Connect:Direct Versions: 6.3.0.0_ifix016 and Helm Version: 1.3.1"},{"location":"playbooks/deploy_ocp_cd/","text":"Deploy IBM Sterling Connect:Direct on OpenShift using Ansible Scripts \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable export ENTITLED_REGISTRY_KEY=<entitlement_key> Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export CD_NAMESPACE=sterling-cdnode01-dev export CD_NODENAME=CDNODE01 Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/deploy_cd.yml","title":"Deploy IBM Connect:Direct 6.3.x"},{"location":"playbooks/deploy_ocp_cd/#deploy-ibm-sterling-connectdirect-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling Connect:Direct on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_cd/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable export ENTITLED_REGISTRY_KEY=<entitlement_key>","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_cd/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_cd/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_cd/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export CD_NAMESPACE=sterling-cdnode01-dev export CD_NODENAME=CDNODE01","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_cd/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/deploy_cd.yml","title":"Run the Plabook"},{"location":"playbooks/deploy_ocp_cdws/","text":"Deploy IBM Sterling Connect:Direct WebService on OpenShift using Ansible Scripts \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export CDWS_NAMESPACE=sterling-cdws01 Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/deploy_cdws.yml","title":"Deploy IBM Connect:Direct WebServices"},{"location":"playbooks/deploy_ocp_cdws/#deploy-ibm-sterling-connectdirect-webservice-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling Connect:Direct WebService on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_cdws/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_cdws/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_cdws/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_cdws/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export CDWS_NAMESPACE=sterling-cdws01","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_cdws/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/deploy_cdws.yml","title":"Run the Plabook"},{"location":"playbooks/deploy_ocp_itx_rs/","text":"Deploy IBM Sterling Transformation Server on OpenShift using Ansible Scripts \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export ITX_RS_NAMESPACE=ibm-itx-rs-dev01 Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/deploy_itx_rs.yml","title":"Deploy IBM Sterling Transformation Server (ITX RS)"},{"location":"playbooks/deploy_ocp_itx_rs/#deploy-ibm-sterling-transformation-server-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling Transformation Server on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_itx_rs/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_itx_rs/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_itx_rs/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_itx_rs/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export ITX_RS_NAMESPACE=ibm-itx-rs-dev01","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_itx_rs/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/deploy_itx_rs.yml","title":"Run the Plabook"},{"location":"playbooks/deploy_ocp_itxa/","text":"Deploy IBM Sterling Transformation Server on OpenShift using Ansible Scripts \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export ITXA_INSTANCEID=dev09 Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/deploy_itxa.yml","title":"Deploy IBM Sterling Transformation Advanced (ITXA)"},{"location":"playbooks/deploy_ocp_itxa/#deploy-ibm-sterling-transformation-server-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling Transformation Server on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_itxa/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_itxa/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_itxa/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_itxa/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export ITXA_INSTANCEID=dev09","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_itxa/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/deploy_itxa.yml","title":"Run the Plabook"},{"location":"playbooks/deploy_ocp_sb2b/","text":"Deploy IBM Sterling B2B Integrator on OpenShift using Ansible Scripts \uf0c1 Supported versions \uf0c1 Playbook will run the last version of Sterling B2Bi, but take care of Kubernetes/Openshift version is supported Sterling B2Bi (helm) Kubernetes OpenShift Helm 6.2.0.2 (3.0.4) >= 1.27 and <= 1.29 >= 4.14 and <= 4.15 >= 3.14.x 6.2.0.1 (3.0.1) >= 1.26 and <= 1.28 >= 4.13 and <= 4.14 >= 3.13.x 6.2.0.0 (3.0.0) >= 1.25 and <= 1.27 >= 4.12 and <= 4.13 >= 3.12.x Check with kubectl version Deploying Sterling B2B Integrator \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable export ENTITLED_REGISTRY_KEY=<entitlement_key> Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Change directory cd ansible-ibm-sterling Run playbook the playbook \uf0c1 1) First you need to provide SI_INSTANCEID, this is used to define your environment. Samples: dev01, dev02, poc01, qa01, prod01 export SI_INSTANCEID=dev01 2) Provide de url domain SI_DOMAIN export SI_DOMAIN=ocp01-8...74-0000.us-south.containers.appdomain.cloud You can get this information from your OpenShift console url: Environment Sample URL IBM Cloud ocp01-8...74-0000.us-south.containers.appdomain.cloud IBM Techzone apps.34...6e.cloud.techzone.ibm.com 3) (Optional) change your version: We always run the last version of Sterling B2Bi, but you can choose to run a different version, based on your RH OpenShift version. export SI_VERSION=6.2.0.2 4) To run playbook the playbook ansible-playbook playbooks/deploy_sb2b.yml Deploy Sterling B2Bi using prebuilt db. \uf0c1 If your using SB2Bi for a prove of concept and get the environment provided in 10 minutes, i suggest to deploy using prebuilt db. ** You need to have a backup from a previous install, we cannot provide because of copyright **. 1) Define previous environment variables export ENTITLED_REGISTRY_KEY=<entitlement_key> export SI_INSTANCEID=dev01 export SI_DOMAIN=ocp01-8...74-0000.us-south.containers.appdomain.cloud 2) Provide your Sterling B2BI database backup export SI_PREBUILTDB_FILE=/tmp/B2BI_6202.tar.gz 3) disable database setup and upgrade export SI_DATASETUP_ENABLED=false export SI_DATASETUP_UPGRADE=false 4) Run prebuilt playbook ansible-playbook playbooks/deploy_sb2b_prebuiltdb.yml Environment Variable \uf0c1 Environment Variable Default Value Required Description ENTITLED_REGISTRY_KEY Y IBM Entitled Registry key SI_INSTANCEID Y Used to define your environment SI_DOMAIN Y Used to define your environment SI_LICENSETYPE no-prod N Specify the license edition as per license agreement. Valid value is prod or non-prod for Production and Non-production respectively. Remember that this parameter is crucial for IBM Licensing and Metering Service SI_SYSTEM_PASSPHRASE passw0rd N Name of system passphrase secret if available SI_ADMIN_MAILADDR admin@company.com N Provide the admin email address SI_ADMIN_SMTPHOST smtp.company.com N Provide the SMTP host details SI_DBVENDOR DB2 N Database vendor: DB2, Oracle, MSSQL SI_DBHOST N Database hostname/ip address SI_DBPORT N Database port SI_DBNAME B2BI N Database name SI_DBUSER db2inst1 N Database user SI_DBPASSWORD passw0rd N Database user password SI_ORACLESERVICENAME false N Oracle service name, must be true when database is Oracle SI_DATASETUP_ENABLED true N Enable database setup job execution SI_DATASETUP_UPGRADE false N Upgrade an older release SI_JMS_USERNAME N JMS Queue user SI_JMS_PASSWORD passw0rd N JMS Queue user password SI_JMS_KEYSTORE_PASSWORD N JMS Queue keystore password SI_JMS_TRUSTSTORE_PASSWORD N JMS Queue truststore password SI_LIBERTY_KEYSTORE_PASSWORD changeit N Liberty keystore password SI_SKIP_HELM false N Avoid to run helm, only generate values.yaml","title":"Deploy IBM Sterling B2B Integrator"},{"location":"playbooks/deploy_ocp_sb2b/#deploy-ibm-sterling-b2b-integrator-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling B2B Integrator on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_sb2b/#supported-versions","text":"Playbook will run the last version of Sterling B2Bi, but take care of Kubernetes/Openshift version is supported Sterling B2Bi (helm) Kubernetes OpenShift Helm 6.2.0.2 (3.0.4) >= 1.27 and <= 1.29 >= 4.14 and <= 4.15 >= 3.14.x 6.2.0.1 (3.0.1) >= 1.26 and <= 1.28 >= 4.13 and <= 4.14 >= 3.13.x 6.2.0.0 (3.0.0) >= 1.25 and <= 1.27 >= 4.12 and <= 4.13 >= 3.12.x Check with kubectl version","title":"Supported versions"},{"location":"playbooks/deploy_ocp_sb2b/#deploying-sterling-b2b-integrator","text":"","title":"Deploying Sterling B2B Integrator"},{"location":"playbooks/deploy_ocp_sb2b/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable export ENTITLED_REGISTRY_KEY=<entitlement_key>","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_sb2b/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_sb2b/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Change directory cd ansible-ibm-sterling","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_sb2b/#run-playbook-the-playbook","text":"1) First you need to provide SI_INSTANCEID, this is used to define your environment. Samples: dev01, dev02, poc01, qa01, prod01 export SI_INSTANCEID=dev01 2) Provide de url domain SI_DOMAIN export SI_DOMAIN=ocp01-8...74-0000.us-south.containers.appdomain.cloud You can get this information from your OpenShift console url: Environment Sample URL IBM Cloud ocp01-8...74-0000.us-south.containers.appdomain.cloud IBM Techzone apps.34...6e.cloud.techzone.ibm.com 3) (Optional) change your version: We always run the last version of Sterling B2Bi, but you can choose to run a different version, based on your RH OpenShift version. export SI_VERSION=6.2.0.2 4) To run playbook the playbook ansible-playbook playbooks/deploy_sb2b.yml","title":"Run playbook the playbook"},{"location":"playbooks/deploy_ocp_sb2b/#deploy-sterling-b2bi-using-prebuilt-db","text":"If your using SB2Bi for a prove of concept and get the environment provided in 10 minutes, i suggest to deploy using prebuilt db. ** You need to have a backup from a previous install, we cannot provide because of copyright **. 1) Define previous environment variables export ENTITLED_REGISTRY_KEY=<entitlement_key> export SI_INSTANCEID=dev01 export SI_DOMAIN=ocp01-8...74-0000.us-south.containers.appdomain.cloud 2) Provide your Sterling B2BI database backup export SI_PREBUILTDB_FILE=/tmp/B2BI_6202.tar.gz 3) disable database setup and upgrade export SI_DATASETUP_ENABLED=false export SI_DATASETUP_UPGRADE=false 4) Run prebuilt playbook ansible-playbook playbooks/deploy_sb2b_prebuiltdb.yml","title":"Deploy Sterling B2Bi using prebuilt db."},{"location":"playbooks/deploy_ocp_sb2b/#environment-variable","text":"Environment Variable Default Value Required Description ENTITLED_REGISTRY_KEY Y IBM Entitled Registry key SI_INSTANCEID Y Used to define your environment SI_DOMAIN Y Used to define your environment SI_LICENSETYPE no-prod N Specify the license edition as per license agreement. Valid value is prod or non-prod for Production and Non-production respectively. Remember that this parameter is crucial for IBM Licensing and Metering Service SI_SYSTEM_PASSPHRASE passw0rd N Name of system passphrase secret if available SI_ADMIN_MAILADDR admin@company.com N Provide the admin email address SI_ADMIN_SMTPHOST smtp.company.com N Provide the SMTP host details SI_DBVENDOR DB2 N Database vendor: DB2, Oracle, MSSQL SI_DBHOST N Database hostname/ip address SI_DBPORT N Database port SI_DBNAME B2BI N Database name SI_DBUSER db2inst1 N Database user SI_DBPASSWORD passw0rd N Database user password SI_ORACLESERVICENAME false N Oracle service name, must be true when database is Oracle SI_DATASETUP_ENABLED true N Enable database setup job execution SI_DATASETUP_UPGRADE false N Upgrade an older release SI_JMS_USERNAME N JMS Queue user SI_JMS_PASSWORD passw0rd N JMS Queue user password SI_JMS_KEYSTORE_PASSWORD N JMS Queue keystore password SI_JMS_TRUSTSTORE_PASSWORD N JMS Queue truststore password SI_LIBERTY_KEYSTORE_PASSWORD changeit N Liberty keystore password SI_SKIP_HELM false N Avoid to run helm, only generate values.yaml","title":"Environment Variable"},{"location":"playbooks/deploy_ocp_scc/","text":"Deploy IBM Sterling Control Center on OpenShift using Ansible Scripts \uf0c1 Deploying \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable export ENTITLED_REGISTRY_KEY=<entitlement_key> Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export SCC_INSTANCEID=dev01 export SCC_PRODUCTS=CCM,CCD export SCC_DOMAIN=ocp01-8...74-0000.us-south.containers.appdomain.cloud where SCC_PRODUCTS is the product that you want to install Product Description CCD Sterling Control Center Director CCM Sterling Control Center Monitor where SCC_DOMAIN is the suffix for your environment Environment Sample URL IBM Cloud ocp01-8...74-0000.us-south.containers.appdomain.cloud IBM Techzone apps.34...6e.cloud.techzone.ibm.com Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/deploy_scc.yml Advanced options \uf0c1","title":"Deploy IBM Sterling Control Center Monitor/Director (CCM/CCD)"},{"location":"playbooks/deploy_ocp_scc/#deploy-ibm-sterling-control-center-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling Control Center on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_scc/#deploying","text":"","title":"Deploying"},{"location":"playbooks/deploy_ocp_scc/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable export ENTITLED_REGISTRY_KEY=<entitlement_key>","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_scc/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_scc/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_scc/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export SCC_INSTANCEID=dev01 export SCC_PRODUCTS=CCM,CCD export SCC_DOMAIN=ocp01-8...74-0000.us-south.containers.appdomain.cloud where SCC_PRODUCTS is the product that you want to install Product Description CCD Sterling Control Center Director CCM Sterling Control Center Monitor where SCC_DOMAIN is the suffix for your environment Environment Sample URL IBM Cloud ocp01-8...74-0000.us-south.containers.appdomain.cloud IBM Techzone apps.34...6e.cloud.techzone.ibm.com","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_scc/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/deploy_scc.yml","title":"Run the Plabook"},{"location":"playbooks/deploy_ocp_scc/#advanced-options","text":"","title":"Advanced options"},{"location":"playbooks/deploy_ocp_seas/","text":"Deploy IBM Sterling External Authentication Server on OpenShift using Ansible Scripts \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export SEAS_NAMESPACE=sterling-seas-dev01 Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/deploy_seas.yml","title":"Deploy IBM Sterling External Authentication Server (SEAS)"},{"location":"playbooks/deploy_ocp_seas/#deploy-ibm-sterling-external-authentication-server-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling External Authentication Server on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_seas/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_seas/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_seas/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_seas/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export SEAS_NAMESPACE=sterling-seas-dev01","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_seas/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/deploy_seas.yml","title":"Run the Plabook"},{"location":"playbooks/deploy_ocp_ssp/","text":"Deploy IBM Sterling Secure Proxy on OpenShift using Ansible Scripts \uf0c1 IBM Entitled Registry \uf0c1 You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable Login on OpenShift \uf0c1 Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234 Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Exporting variables \uf0c1 To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export SSP_INSTANCEID=dev01 Run the Plabook \uf0c1 To run playbook the playbook ansible-playbook playbooks/dev_ssp.yml","title":"Deploy IBM Sterling Secure Proxy Server (SSP)"},{"location":"playbooks/deploy_ocp_ssp/#deploy-ibm-sterling-secure-proxy-on-openshift-using-ansible-scripts","text":"","title":"Deploy IBM Sterling Secure Proxy on OpenShift using Ansible Scripts"},{"location":"playbooks/deploy_ocp_ssp/#ibm-entitled-registry","text":"You must have kubectl , oc , git and ansible installed in your machine Log in the IBM Container software library with the IBMid and password that are associated with the entitled software. Click Get entitlement key . With key export variable","title":"IBM Entitled Registry"},{"location":"playbooks/deploy_ocp_ssp/#login-on-openshift","text":"Do a login in Openshift console and run the command: oc login --token=sha256~P...k --server=https://c....containers.cloud.xxx.com:31234","title":"Login on OpenShift"},{"location":"playbooks/deploy_ocp_ssp/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/deploy_ocp_ssp/#exporting-variables","text":"To run playbook the playbook cd ansible-ibm-sterling export ANSIBLE_CONFIG=< FULL_PATH >/ansible.cfg export ENTITLED_REGISTRY_KEY=<entitlement_key> export SSP_INSTANCEID=dev01","title":"Exporting variables"},{"location":"playbooks/deploy_ocp_ssp/#run-the-plabook","text":"To run playbook the playbook ansible-playbook playbooks/dev_ssp.yml","title":"Run the Plabook"},{"location":"playbooks/setup_b2b/","text":"Getting start \uf0c1 Prerequisites \uf0c1 Download installation files: \uf0c1 Product Name PartNum Filename Description | IBM DB2 V11.5.x | | DB2S_11.5.4_MPML.tar.gz | IBM DB2 V11.5.4 Multi-platform Multi-language| | IBM Java SDK/JRE | M06M9ML | SB2BI_6.1.2_MP_ML_JDK.zip | IBM Sterling B2B Integrator V6.1.2 or IBM Sterling File Gateway V6.1.2 Java SDK/JRE Multiplatform| | IBM Sterling B2B Integrator | M06MCML | SB2BI_6.1.2_MP_ML.zip | IBM Sterling B2B Integrator V6.1.2 for Multiplatform Multilingual| | IBM Java Unrestricted Policy | | unrestrictedpolicyfiles.zip | | Install Nginx \uf0c1 First, ensure your system is up-to-date with the latest packages. Nginx is not available in the default repositories of Red Hat-based systems. You need to install the EPEL (Extra Packages for Enterprise Linux) repository. sudo yum update -y sudo yum install epel-release -y Now you can install Nginx using the following command: sudo yum install nginx -y After installing Nginx, start the Nginx service and ensure that Nginx starts automatically at boot time, with the following command: sudo systemctl start nginx sudo systemctl enable nginx 3) Copy download files to Web Server cp <files> /usr/share/nginx/html Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Create a inventory file \uf0c1 Copy from template cd ansible-ibm-sterling cp environments/sb2b-servers.dev.sample environments/hosts.dev Edit and provide information for your environment, like DB2 server, Sterling Integrator node name, ... Provide information for you nginx server Running playbooks \uf0c1 Install Sterling B2B (standalone) cd ansible-ibm-sterling ansible-playbook -i environments/hosts.dev -u root playbooks/setup-sb2b.yml","title":"Install IBM Sterling B2B Integrator 6.1.2"},{"location":"playbooks/setup_b2b/#getting-start","text":"","title":"Getting start"},{"location":"playbooks/setup_b2b/#prerequisites","text":"","title":"Prerequisites"},{"location":"playbooks/setup_b2b/#download-installation-files","text":"Product Name PartNum Filename Description | IBM DB2 V11.5.x | | DB2S_11.5.4_MPML.tar.gz | IBM DB2 V11.5.4 Multi-platform Multi-language| | IBM Java SDK/JRE | M06M9ML | SB2BI_6.1.2_MP_ML_JDK.zip | IBM Sterling B2B Integrator V6.1.2 or IBM Sterling File Gateway V6.1.2 Java SDK/JRE Multiplatform| | IBM Sterling B2B Integrator | M06MCML | SB2BI_6.1.2_MP_ML.zip | IBM Sterling B2B Integrator V6.1.2 for Multiplatform Multilingual| | IBM Java Unrestricted Policy | | unrestrictedpolicyfiles.zip | |","title":"Download installation files:"},{"location":"playbooks/setup_b2b/#install-nginx","text":"First, ensure your system is up-to-date with the latest packages. Nginx is not available in the default repositories of Red Hat-based systems. You need to install the EPEL (Extra Packages for Enterprise Linux) repository. sudo yum update -y sudo yum install epel-release -y Now you can install Nginx using the following command: sudo yum install nginx -y After installing Nginx, start the Nginx service and ensure that Nginx starts automatically at boot time, with the following command: sudo systemctl start nginx sudo systemctl enable nginx 3) Copy download files to Web Server cp <files> /usr/share/nginx/html","title":"Install Nginx"},{"location":"playbooks/setup_b2b/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/setup_b2b/#create-a-inventory-file","text":"Copy from template cd ansible-ibm-sterling cp environments/sb2b-servers.dev.sample environments/hosts.dev Edit and provide information for your environment, like DB2 server, Sterling Integrator node name, ... Provide information for you nginx server","title":"Create a inventory file"},{"location":"playbooks/setup_b2b/#running-playbooks","text":"Install Sterling B2B (standalone) cd ansible-ibm-sterling ansible-playbook -i environments/hosts.dev -u root playbooks/setup-sb2b.yml","title":"Running playbooks"},{"location":"playbooks/setup_cd/","text":"Getting start \uf0c1 Prerequisites \uf0c1 Download installation files: \uf0c1 Product Name PartNum Filename Description IBM Connect:Direct IBM_CD_V6.2_UNIX_RedHat.Z.tar.Z IBM Connect:Direct 6.2.x Install Nginx \uf0c1 First, ensure your system is up-to-date with the latest packages. Nginx is not available in the default repositories of Red Hat-based systems. You need to install the EPEL (Extra Packages for Enterprise Linux) repository. sudo yum update -y sudo yum install epel-release -y Now you can install Nginx using the following command: sudo yum install nginx -y After installing Nginx, start the Nginx service and ensure that Nginx starts automatically at boot time, with the following command: sudo systemctl start nginx sudo systemctl enable nginx 3) Copy download files to Web Server cp IBM_CD_V6.2_UNIX_RedHat.Z.tar.Z /usr/share/nginx/html Cloning ansible-ibm-websphere from git \uf0c1 git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git Create a inventory file \uf0c1 Copy from template cd ansible-ibm-sterling cp environments/cd-servers.dev.sample environments/hosts.dev Edit and provide information for your environment, like C:D node name and ip address. Provide information for you nginx server Running playbooks \uf0c1 Install Connect:Direct (standalone) cd ansible-ibm-sterling ansible-playbook -i environments/hosts.dev -u root playbooks/setup-cd.yml","title":"Install IBM Connect:Direct 6.2.x"},{"location":"playbooks/setup_cd/#getting-start","text":"","title":"Getting start"},{"location":"playbooks/setup_cd/#prerequisites","text":"","title":"Prerequisites"},{"location":"playbooks/setup_cd/#download-installation-files","text":"Product Name PartNum Filename Description IBM Connect:Direct IBM_CD_V6.2_UNIX_RedHat.Z.tar.Z IBM Connect:Direct 6.2.x","title":"Download installation files:"},{"location":"playbooks/setup_cd/#install-nginx","text":"First, ensure your system is up-to-date with the latest packages. Nginx is not available in the default repositories of Red Hat-based systems. You need to install the EPEL (Extra Packages for Enterprise Linux) repository. sudo yum update -y sudo yum install epel-release -y Now you can install Nginx using the following command: sudo yum install nginx -y After installing Nginx, start the Nginx service and ensure that Nginx starts automatically at boot time, with the following command: sudo systemctl start nginx sudo systemctl enable nginx 3) Copy download files to Web Server cp IBM_CD_V6.2_UNIX_RedHat.Z.tar.Z /usr/share/nginx/html","title":"Install Nginx"},{"location":"playbooks/setup_cd/#cloning-ansible-ibm-websphere-from-git","text":"git clone https://github.com/ibm-sterling-devops/ansible-ibm-sterling.git","title":"Cloning ansible-ibm-websphere from git"},{"location":"playbooks/setup_cd/#create-a-inventory-file","text":"Copy from template cd ansible-ibm-sterling cp environments/cd-servers.dev.sample environments/hosts.dev Edit and provide information for your environment, like C:D node name and ip address. Provide information for you nginx server","title":"Create a inventory file"},{"location":"playbooks/setup_cd/#running-playbooks","text":"Install Connect:Direct (standalone) cd ansible-ibm-sterling ansible-playbook -i environments/hosts.dev -u root playbooks/setup-cd.yml","title":"Running playbooks"},{"location":"roles/cd_deploy/","text":"Role cd_deploy \uf0c1","title":"cd_deploy"},{"location":"roles/cd_deploy/#role-cd_deploy","text":"","title":"Role cd_deploy"},{"location":"roles/cdws_deploy/","text":"Role cdws_deploy \uf0c1","title":"cdws_deploy"},{"location":"roles/cdws_deploy/#role-cdws_deploy","text":"","title":"Role cdws_deploy"},{"location":"roles/itx_rs_deploy/","text":"Role ITX RS \uf0c1 export ITX_RS_NAMESPACE=ibm-itx-rs-dev01 ansible-playbook playbooks/deploy_itx_rs.yml","title":"itx_rs_deploy"},{"location":"roles/itx_rs_deploy/#role-itx-rs","text":"export ITX_RS_NAMESPACE=ibm-itx-rs-dev01 ansible-playbook playbooks/deploy_itx_rs.yml","title":"Role ITX RS"},{"location":"roles/itxa_deploy/","text":"Role SSP CM \uf0c1 SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"itxa_deploy"},{"location":"roles/itxa_deploy/#role-ssp-cm","text":"SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"Role SSP CM"},{"location":"roles/sb2bi_deploy/","text":"Role sb2b_deploy \uf0c1","title":"sb2bi_deploy"},{"location":"roles/sb2bi_deploy/#role-sb2b_deploy","text":"","title":"Role sb2b_deploy"},{"location":"roles/sb2bi_deploy_db2/","text":"# Role scc_deploy \uf0c1","title":"sb2bi_deploy_db2"},{"location":"roles/sb2bi_deploy_db2/#role-scc_deploy","text":"","title":"# Role scc_deploy"},{"location":"roles/sb2bi_deploy_mq/","text":"# Role scc_deploy \uf0c1","title":"sb2bi_deploy_mq"},{"location":"roles/sb2bi_deploy_mq/#role-scc_deploy","text":"","title":"# Role scc_deploy"},{"location":"roles/sb2bi_setup_db2/","text":"sb2bi_setup_db2 \uf0c1 This role will perform some initial setup on the Db2 instance that is needed to prepare it for use with the Sterling B2Bi. The role will copy a bash script (setupdb.sh) into the Db2 pod and execute it inside the container, this script will perform a number of configuration changes to the database like 'CREATE DATABASE, CREATE TABLESPACES, ...'. Role Variables \uf0c1 si_instanceid \uf0c1 The instance id of the Sterling B2Bi to execute the setup in. Required Environment Variable: SI_INSTANCEID Default Value: None db2_namespace \uf0c1 The namespace where the Db2 instance is running. Default Value: sterling-b2bi-{{ si_instanceid }}-db2 db2_instance_name \uf0c1 The name of the db2 instance to execute the setup in. Default Value: db2inst1 db2_username \uf0c1 The username that will be used to connect to the database specified by db2_dbname . Default Value: db2inst1 db2_dbname \uf0c1 The name of the database in the instance to connect to when executing the setup script. Default Value: B2BI db2_container \uf0c1 The name of the container to connect to when executing the setup script. Default Value: mydb2 License \uf0c1 EPL-2.0","title":"sb2bi_setup_db2"},{"location":"roles/sb2bi_setup_db2/#sb2bi_setup_db2","text":"This role will perform some initial setup on the Db2 instance that is needed to prepare it for use with the Sterling B2Bi. The role will copy a bash script (setupdb.sh) into the Db2 pod and execute it inside the container, this script will perform a number of configuration changes to the database like 'CREATE DATABASE, CREATE TABLESPACES, ...'.","title":"sb2bi_setup_db2"},{"location":"roles/sb2bi_setup_db2/#role-variables","text":"","title":"Role Variables"},{"location":"roles/sb2bi_setup_db2/#si_instanceid","text":"The instance id of the Sterling B2Bi to execute the setup in. Required Environment Variable: SI_INSTANCEID Default Value: None","title":"si_instanceid"},{"location":"roles/sb2bi_setup_db2/#db2_namespace","text":"The namespace where the Db2 instance is running. Default Value: sterling-b2bi-{{ si_instanceid }}-db2","title":"db2_namespace"},{"location":"roles/sb2bi_setup_db2/#db2_instance_name","text":"The name of the db2 instance to execute the setup in. Default Value: db2inst1","title":"db2_instance_name"},{"location":"roles/sb2bi_setup_db2/#db2_username","text":"The username that will be used to connect to the database specified by db2_dbname . Default Value: db2inst1","title":"db2_username"},{"location":"roles/sb2bi_setup_db2/#db2_dbname","text":"The name of the database in the instance to connect to when executing the setup script. Default Value: B2BI","title":"db2_dbname"},{"location":"roles/sb2bi_setup_db2/#db2_container","text":"The name of the container to connect to when executing the setup script. Default Value: mydb2","title":"db2_container"},{"location":"roles/sb2bi_setup_db2/#license","text":"EPL-2.0","title":"License"},{"location":"roles/scc_deploy/","text":"# Role scc_deploy \uf0c1","title":"scc_deploy"},{"location":"roles/scc_deploy/#role-scc_deploy","text":"","title":"# Role scc_deploy"},{"location":"roles/scc_deploy_db2/","text":"# Role scc_deploy \uf0c1","title":"scc_deploy_db2"},{"location":"roles/scc_deploy_db2/#role-scc_deploy","text":"","title":"# Role scc_deploy"},{"location":"roles/scc_deploy_mq/","text":"# Role scc_deploy \uf0c1","title":"scc_deploy_mq"},{"location":"roles/scc_deploy_mq/#role-scc_deploy","text":"","title":"# Role scc_deploy"},{"location":"roles/scc_setup_db2/","text":"sb2bi_setup_db2 \uf0c1 This role will perform some initial setup on the Db2 instance that is needed to prepare it for use with the Sterling B2Bi. The role will copy a bash script (setupdb.sh) into the Db2 pod and execute it inside the container, this script will perform a number of configuration changes to the database like 'CREATE DATABASE, CREATE TABLESPACES, ...'. Role Variables \uf0c1 si_instanceid \uf0c1 The instance id of the Sterling B2Bi to execute the setup in. Required Environment Variable: SI_INSTANCEID Default Value: None db2_namespace \uf0c1 The namespace where the Db2 instance is running. Default Value: sterling-b2bi-{{ si_instanceid }}-db2 db2_instance_name \uf0c1 The name of the db2 instance to execute the setup in. Default Value: db2inst1 db2_username \uf0c1 The username that will be used to connect to the database specified by db2_dbname . Default Value: db2inst1 db2_dbname \uf0c1 The name of the database in the instance to connect to when executing the setup script. Default Value: B2BI db2_container \uf0c1 The name of the container to connect to when executing the setup script. Default Value: mydb2 License \uf0c1 EPL-2.0","title":"scc_setup_db2"},{"location":"roles/scc_setup_db2/#sb2bi_setup_db2","text":"This role will perform some initial setup on the Db2 instance that is needed to prepare it for use with the Sterling B2Bi. The role will copy a bash script (setupdb.sh) into the Db2 pod and execute it inside the container, this script will perform a number of configuration changes to the database like 'CREATE DATABASE, CREATE TABLESPACES, ...'.","title":"sb2bi_setup_db2"},{"location":"roles/scc_setup_db2/#role-variables","text":"","title":"Role Variables"},{"location":"roles/scc_setup_db2/#si_instanceid","text":"The instance id of the Sterling B2Bi to execute the setup in. Required Environment Variable: SI_INSTANCEID Default Value: None","title":"si_instanceid"},{"location":"roles/scc_setup_db2/#db2_namespace","text":"The namespace where the Db2 instance is running. Default Value: sterling-b2bi-{{ si_instanceid }}-db2","title":"db2_namespace"},{"location":"roles/scc_setup_db2/#db2_instance_name","text":"The name of the db2 instance to execute the setup in. Default Value: db2inst1","title":"db2_instance_name"},{"location":"roles/scc_setup_db2/#db2_username","text":"The username that will be used to connect to the database specified by db2_dbname . Default Value: db2inst1","title":"db2_username"},{"location":"roles/scc_setup_db2/#db2_dbname","text":"The name of the database in the instance to connect to when executing the setup script. Default Value: B2BI","title":"db2_dbname"},{"location":"roles/scc_setup_db2/#db2_container","text":"The name of the container to connect to when executing the setup script. Default Value: mydb2","title":"db2_container"},{"location":"roles/scc_setup_db2/#license","text":"EPL-2.0","title":"License"},{"location":"roles/seas_deploy/","text":"Role SEAS \uf0c1 SEAS_NAMESPACE SEAS_VERSION: 6.1.0.0.06 SEAS_SYS_PASSPHRASE: default value: Passw0rd@ SEAS_ADMIN_PASSWORD default value: Passw0rd@ SEAS_KEYSTORE_PASSPHRASE default value: Change1t@ SEAS_TRUSTSTOREPASSWORD default value: Change1t@ SEAS_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"seas_deploy"},{"location":"roles/seas_deploy/#role-seas","text":"SEAS_NAMESPACE SEAS_VERSION: 6.1.0.0.06 SEAS_SYS_PASSPHRASE: default value: Passw0rd@ SEAS_ADMIN_PASSWORD default value: Passw0rd@ SEAS_KEYSTORE_PASSPHRASE default value: Change1t@ SEAS_TRUSTSTOREPASSWORD default value: Change1t@ SEAS_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"Role SEAS"},{"location":"roles/ssp_cm_deploy/","text":"Role SSP CM \uf0c1 SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"ssp_cm_deploy"},{"location":"roles/ssp_cm_deploy/#role-ssp-cm","text":"SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"Role SSP CM"},{"location":"roles/ssp_config/","text":"# Role scc_deploy \uf0c1","title":"ssp_config"},{"location":"roles/ssp_config/#role-scc_deploy","text":"","title":"# Role scc_deploy"},{"location":"roles/ssp_deploy/","text":"Role SSP CM \uf0c1 SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"ssp_deploy"},{"location":"roles/ssp_deploy/#role-ssp-cm","text":"SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"Role SSP CM"},{"location":"roles/ssp_ps_deploy/","text":"Role SSP CM \uf0c1 SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"ssp_ps_deploy"},{"location":"roles/ssp_ps_deploy/#role-ssp-cm","text":"SSP_CM_NAMESPACE SSP_CM_VERSION: 6.1.0.0.06 SSP_CM_LICENSETYPE: default value: non-prod suported values: prod or no-prod","title":"Role SSP CM"}]}